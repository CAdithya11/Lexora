name: CI Pipeline
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        mongodb-version: ['8.0']
    
    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: lexoraDB
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.12.0
        with: 
          mongodb-version: ${{ matrix.mongodb-version }}
          
      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with: 
          java-version: 21
          distribution: temurin
          
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: Frontend/package-lock.json
          
      # Install and configure Chrome/ChromeDriver
      - name: Setup Chrome and ChromeDriver
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable
          
      - name: Setup ChromeDriver
        uses: nanasess/setup-chromedriver@v2
        
      # Build backend
      - name: Build the project
        working-directory: backend
        run: mvn clean package --no-transfer-progress -DskipTests
        
      # Install frontend dependencies
      - name: Install frontend dependencies
        working-directory: ./Frontend
        run: npm ci --legacy-peer-deps
        
      # Build frontend
      - name: Build frontend
        working-directory: ./Frontend
        run: npm run build
        
      # Start Spring Boot application
      - name: Run Spring boot application
        working-directory: backend
        run: |
          nohup java -jar target/*.jar > spring-boot.log 2>&1 &
          echo $! > spring-boot.pid
          
      # Start frontend server
      - name: Serve frontend
        working-directory: ./Frontend
        run: |
          npm install -g serve
          nohup serve -s dist -l 5173 --single > frontend.log 2>&1 &
          echo $! > frontend.pid
          
      # Wait for services to be ready
      - name: Wait for Spring Boot to start
        run: |
          echo "Waiting for Spring Boot to become healthy"
          timeout 120 bash -c 'until curl -s http://localhost:8080/actuator/health | grep -q UP; do echo "Waiting for Spring Boot..."; sleep 5; done'
          echo "Spring Boot is ready!"
          
      - name: Wait for frontend to be ready
        run: |
          echo "Waiting for frontend to be ready"
          timeout 60 bash -c 'until curl -s -o /dev/null -w "%{http_code}" http://localhost:5173/Lexora/ | grep -q 200; do echo "Waiting for frontend..."; sleep 3; done'
          echo "Frontend is ready!"
          
      # Verify services are running
      - name: Verify services are running
        run: |
          echo "=== Spring Boot Health Check ==="
          curl -s http://localhost:8080/actuator/health || echo "Spring Boot health check failed"
          
          echo "=== Frontend Check ==="
          curl -s -I http://localhost:5173/Lexora/ || echo "Frontend check failed"
          
          echo "=== Process List ==="
          ps aux | grep -E "(java|serve)" | grep -v grep
          
      # Run tests
      - name: Run JUnit tests
        working-directory: backend
        run: mvn test -Dtest="**/Selenium/**/*Test"
        env:
          DISPLAY: :99
          
      # Cleanup and logs
      - name: Print application logs on failure
        if: failure()
        run: |
          echo "=== Spring Boot Logs ==="
          cat backend/spring-boot.log || echo "No Spring Boot logs found"
          
          echo "=== Frontend Logs ==="
          cat Frontend/frontend.log || echo "No frontend logs found"
          
          echo "=== Test Failure Reports ==="
          find backend/target/surefire-reports -name "*.txt" -exec cat {} \; || echo "No test reports found"
          
      - name: Cleanup processes
        if: always()
        run: |
          if [ -f backend/spring-boot.pid ]; then
            kill $(cat backend/spring-boot.pid) || true
          fi
          if [ -f Frontend/frontend.pid ]; then
            kill $(cat Frontend/frontend.pid) || true
          fi
          
      # Upload test results
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            backend/target/surefire-reports/
            backend/spring-boot.log
            Frontend/frontend.log
